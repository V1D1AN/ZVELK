version: "3.3"
services:
  certificates:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK}
    container_name: certificates
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./instances.yml:/usr/share/elasticsearch/config/certs/instances.yml
      - certs:/target_ca_cert_dir
    user: "0"
    networks:
      - zvelk
    command: >
        bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R 1000:0 config/certs;
        find . -type d -exec chmod 755 \{\} \;;
        find . -type f -exec chmod 644 \{\} \;;
        cp config/certs/ca/ca.crt /target_ca_cert_dir/ ;
        echo "All done!";'

  traefik:
    image: traefik:2.4
    container_name: traefik
    restart: always
    hostname: ${HOSTNAME}
    ports:
      - "443:443"
    volumes:
      - ./traefik/userfile:/etc/traefik/userfile:ro
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/dyn.toml:/etc/traefik/dyn.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - traefikdata:/tmp
      - certs:/etc/ssl:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
    networks:
      - zvelk
      
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK}
    container_name: es01
    hostname: es01
    restart: always
    environment:
      - node.name=es01
      - cluster.name=zvelk
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - "ES_JAVA_OPTS=-XmsRAM_MASTERg -XmxRAM_MASTERg"
      - network.host=0.0.0.0
      - bootstrap.memory_lock=true
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    volumes: ['data01:/usr/share/elasticsearch/data', 'certs:$CERTS_DIR:ro']
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - zvelk
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
      
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK}
    container_name: kibana
    hostname: kibana
    restart: always
    depends_on:
      - es01
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./kibana/node.options:/usr/share/kibana/config/node.options:ro
      - ./kibana/index:/usr/share/kibana/index:ro
      - ./kibana/dashboard:/usr/share/kibana/dashboard:ro
      - kibanadata:/usr/share/kibana/data
      - certs:/usr/share/certificates:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=PathPrefix(`/kibana`)"
      - "traefik.http.routers.kibana.entryPoints=secure"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.services.kibana.loadbalancer.server.scheme=https"
    networks:
      - zvelk

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELK}
    container_name: logstash
    hostname: logstash
    restart: always
    user: root
    volumes:
      - certs:/usr/share/certificates:ro
      - zircolite:/usr/share/logstash/zircolite:rw
      - velociraptor_extracted:/usr/share/logstash/velociraptor:rw
      - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/config/jvm.options:/usr/share/logstash/config/jvm.options:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/template:/usr/share/logstash/template:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - zvelk
    ports:
      - "5044:5044"

  replay:
    image: v1d1an/replay:1.1
    container_name: replay
    hostname: replay
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - ZIRCOLITE_USER=${ZIRCOLITE_USER}
      - ZIRCOLITE_PASSWORD=${ZIRCOLITE_PASSWORD}
    volumes:
      - ./replay/replay.sh:/data/replay.sh
      - zircolite:/evtx
      - upload:/pcap
      - velociraptor_upload:/velociraptor
      - velociraptor_extracted:/extracted
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - zvelk

  zircolite-upload:
    image: v1d1an/file-upload:1.1
    container_name: zircolite-upload
    hostname: zircolite-upload
    restart: always
    user: root
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - zircolite:/var/www/upload/server/php/chroot/files
    environment:
      - SITE_NAME=Upload for Zircolite
      - SITE_USERNAME=upload
      - SITE_PASSWORD=upload
      - DESCRIPTION=Upload only EVTX file or JSON file (Use template exportForELK.tmpl).
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zircolite.rule=PathPrefix(`/zircolite`)"
      - "traefik.http.routers.zircolite.entryPoints=secure"
      - "traefik.http.routers.zircolite.tls=true"
      - "traefik.http.services.zircolite.loadbalancer.server.port=80"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.zircolite.middlewares=redirect-to-https"
      - "traefik.http.middlewares.zircolite-stripprefix.stripprefix.prefixes=/zircolite"
      - "traefik.http.routers.zircolite.middlewares=zircolite-stripprefix"
    networks:
      - zvelk


  cyberchef:
    image: mpepping/cyberchef:latest
    container_name: cyberchef
    hostname: cyberchef
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cyberchef.rule=PathPrefix(`/cyberchef`)"
      - "traefik.http.routers.cyberchef.entryPoints=secure"
      - "traefik.http.routers.cyberchef.tls=true"
      - "traefik.http.middlewares.cyberchef-stripprefix.stripprefix.prefixes=/cyberchef"
      - "traefik.http.routers.cyberchef.middlewares=cyberchef-stripprefix"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - zvelk
    expose:
      - "8000"

  homer:
    image: b4bz/homer:latest
    container_name: homer
    hostname: homer
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - INIT_ASSETS=0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=PathPrefix(`/`)"
      - "traefik.http.routers.homer.entryPoints=secure"
      - "traefik.http.routers.homer.tls=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
        - ./homer:/www/assets
    networks:
      - zvelk
    expose:
      - "8080"
     
  spiderfoot:
    image: "dtagdevsec/spiderfoot:2204"
    container_name: spiderfoot
    hostname: spiderfoot
    restart: always
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.spiderfoot.rule=PathPrefix(`/spiderfoot`)"
     - "traefik.http.routers.spiderfoot.entryPoints=secure"
     - "traefik.http.routers.spiderfoot.tls=true"
    expose:
     - "8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
     - spiderfoot:/home/spiderfoot/.spiderfoot
    networks:
     - zvelk

  db:
    image: mysql:latest
    container_name: db
    hostname: db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    cap_add:
      - SYS_NICE
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
      - mysql:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - zvelk

  codimd:
    image: hackmdio/hackmd:2.4.1
    container_name: codimd
    hostname: codimd
    environment:
      - CMD_DB_URL=mysql://codiuser:codipass@db/codimd
      - CMD_USECDN=true
      - CMD_PROTOCOL_USESSL=true
      - CMD_DOMAIN=${HOSTNAME}
      - CMD_URL_PATH=codimd
      - CMD_SESSION_SECRET=1337h4x0r
      - CMD_HSTS_ENABLE=false
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.codimd.rule=PathPrefix(`/codimd`)"
      - "traefik.http.routers.codimd.entryPoints=secure"
      - "traefik.http.routers.codimd.tls=true"
      - "traefik.http.middlewares.codimd-stripprefix.stripprefix.prefixes=/codimd"
      - "traefik.http.routers.codimd.middlewares=codimd-stripprefix"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - codimd:/home/hackmd/app/public/uploads
    restart: always
    networks:
      - zvelk

  velociraptor:
    image: wlambert/velociraptor:latest
    container_name: velociraptor
    restart: always
    hostname: velociraptor
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - VELOX_SERVER_URL=${VELOX_SERVER_URL}
      - VELOX_FRONTEND_HOSTNAME=${HOSTNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.velociraptor.rule=PathPrefix(`/velociraptor`)"
      - "traefik.http.routers.velociraptor.entryPoints=secure"
      - "traefik.http.routers.velociraptor.tls=true"
      - "traefik.http.services.velociraptor.loadbalancer.server.port=8889"
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./velociraptor:/velociraptor
      - velociraptor_upload:/velociraptor/upload
    networks:
     - zvelk

  velociraptor-upload:
    image: v1d1an/file-upload:1.1
    container_name: velociraptor-upload
    hostname: velociraptor-upload
    restart: always
    user: root
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - velociraptor_upload:/var/www/upload/server/php/chroot/files
    environment:
      - SITE_NAME=Upload for Velociraptor
      - SITE_USERNAME=upload
      - SITE_PASSWORD=upload
      - DESCRIPTION=Upload only Collector offline for Velociraptor.
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.velociraptor-upload.rule=PathPrefix(`/velociraptor-upload`)"
      - "traefik.http.routers.velociraptor-upload.entryPoints=secure"
      - "traefik.http.routers.velociraptor-upload.tls=true"
      - "traefik.http.services.velociraptor-upload.loadbalancer.server.port=80"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.velociraptor-upload.middlewares=redirect-to-https"
      - "traefik.http.middlewares.velociraptor-upload-stripprefix.stripprefix.prefixes=/velociraptor-upload"
      - "traefik.http.routers.velociraptor-upload.middlewares=velociraptor-upload-stripprefix"
    networks:
      - zvelk

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
     - zvelk

networks:
   zvelk:
    driver: bridge
    
volumes:
   data01:
    external: false
   kibanadata:
    external: false
   certs:
    external: false   
   traefikdata:
    external: false
   upload:
    external: false
   spiderfoot:
    external: false
   codimd:
    external: false
   zircolite:
    external: false
   velociraptor:
    external: false
   velociraptor_upload:
    external: false
   velociraptor_extracted:
    external: false
   mysql:
    external: false
